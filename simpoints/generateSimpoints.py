#!/usr/bin/python

import sys
import os
import subprocess
from optparse import OptionParser

def parseArgs():
    parser = OptionParser(usage="generateSimpoints.py experiment-dir")
    parser.add_option("--simpoint-binary", action="store", dest="simpointBin", type="string", default="/Users/jahre/bin/simpoint", help="Path to simpoint binary")
    parser.add_option("--only-dir", action="store", dest="onlyDir", type="string", default="", help="Process this directory only")
    parser.add_option("--sample-size", action="store", dest="sampleSize", type="int", default=100*10**6, help="Instructions per simpoint sample")
    opts, args = parser.parse_args()
    return opts, args

def parseDatafile(filename, opts):
    datafile = open(filename)
    
    results = {}
    
    for line in datafile:
        data = line.split()
        assert len(data) == 2
                
        clusterid = int(data[1])
        value = int(data[0])*opts.sampleSize
        
        assert clusterid not in results
        results[clusterid] = value
        
    
    datafile.close()
    return results

def runSimPoints(frequencyFile, bmname, opts):
        
    print "Processing", bmname
    
    simpointname = bmname+"-simpoints.txt"
    
    arguments = [opts.simpointBin]
    arguments += ["-k", "1"]
    arguments += ["-loadFVFile", frequencyFile]
    arguments += ["-saveSimpoints", simpointname]

    outfile = open("simpoint-output.txt", "w")
    subprocess.call(arguments, stdout=outfile)
    outfile.flush()
    outfile.close()
        
    data = parseDatafile(simpointname, opts)
    print "-- Simpoint located at "+str(data[0])+" instructions"
    
    return data
    
def gatherSimpoints(opts):
    
    kvalres = {}
    
    if opts.onlyDir != "":
        os.chdir(opts.onlyDir)
        kvalres["simpoint"] = runSimPoints("bbv_outfile.bb", "simpoint", opts)
        os.chdir("..")
    else:
        if not os.path.exists("pbsconfig.py"):
            print "File not found: No pbsconfig.py in directory "+os.getcwd()
            sys.exit(-1)
        
        sys.path.append(os.getcwd())
        import pbsconfig
        
        for cmd,args in pbsconfig.commandlines:
            dirID = pbsconfig.get_unique_id(args)
            bm = pbsconfig.get_benchmark(args)
            
            try:
                os.chdir(dirID)
            except:
                print ""
                print "Error: directory "+dirID+" does not exist"
                print
                continue
            
            kvalres[bm] = runSimPoints("bbv_outfile.bb", bm, opts)
            
            os.chdir("..")
    
    return kvalres
    
def generateSimulatorConfig(results, opts):
    
    filename = "simpoints.py"
    
    print "Generating configuration file "+filename
    print
    
    outfile = open(filename, "w")
    
    outfile.write("# Autogenerated simpoints config for MM5\n\n")
    outfile.write("intervalsize="+str(opts.sampleSize)+"\n")
    outfile.write("maxk=1\n\n")
    outfile.write("simpoints = "+str(results)+"\n\n")
    
    outfile.flush()
    outfile.close()
    
def main():

    opts,args = parseArgs()
    usedir = args[0]
    os.chdir(usedir)
    
    print "Running simpoints generation in directory", os.getcwd()
    
    results = gatherSimpoints(opts)
    generateSimulatorConfig(results, opts)

if __name__ == "__main__":
    sys.exit(main())


