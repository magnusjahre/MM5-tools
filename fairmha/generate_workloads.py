
import random

# Constants
FASTFW_START = 1*10**9
FASTFW_END = int(1.1*10**9)
WORKLOAD_COUNT = 40
SEED = 23 #Chosen so that all benchmarks are used in at least one workload

# Benchmarks
benchmarks = ['gzip', 'vpr', 'gcc', 'mcf', 'crafty', 'parser', 'eon', 'perlbmk', 'gap', 'vortex1', 'bzip', 'twolf', 'wupwise', 'swim', 'mgrid', 'applu', 'mesa', 'galgel', 'art', 'equake', 'facerec', 'ammp', 'lucas', 'sixtrack' ,'apsi', 'fma3d']
cpus = [4]

used_bms = {}
for cpu in cpus:
    used_bms[cpu] = []
    for i in range(len(benchmarks)):
        used_bms[cpu].append(0)

random.seed(SEED)

outfile = open("workloads.py", 'w')
outfile.write("# Autogenerated workload configuration file\n\n")
outfile.write("hog_workloads = {\n\n")

for cpu_count in cpus:

    outfile.write(str(cpu_count)+":{\n")
    for i in range(WORKLOAD_COUNT):
        
        useBenchmarks = []
        useFW = []
        
        for j in range(cpu_count-1):
            fastfw = random.randint(FASTFW_START, FASTFW_END)
            bm = random.randint(0, len(benchmarks)-1)
            useFW.append(fastfw)
            useBenchmarks.append(benchmarks[bm])
            used_bms[cpu_count][bm] = used_bms[cpu_count][bm] + 1
        
        if i == (WORKLOAD_COUNT-1):
            outfile.write(str(i+1)+":("+str(useBenchmarks)+","+str(useFW)+")\n")
        else:
            outfile.write(str(i+1)+":("+str(useBenchmarks)+","+str(useFW)+"),\n")

    outfile.write("},\n\n")

for cpu in cpus:    
    print "\n"+str(cpu)+" CPU benchmark usage\n"
    print "Benchmark".ljust(15)+"# used".rjust(15)
    for i in range(len(benchmarks)):
        print benchmarks[i].ljust(15)+(str(used_bms[cpu][i])+" times").rjust(15)

for cpu in cpus:    
    if 0 in used_bms[cpu]:
        print "WARNING: The "+str(cpu)+" CPU workloads has at least one benchmark that is never used"

outfile.write("}\n")        
outfile.close()
